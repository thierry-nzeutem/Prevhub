#!/bin/bash

# Script de d√©ploiement automatis√© pour ERP PrevHub Phase 1.2
# D√©ploie les API projets enrichies et l'interface de gestion

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©ploiement ERP PrevHub Phase 1.2 - API Projets Enrichies"
echo "=============================================================="

# Configuration
SERVER="217.65.146.10"
SERVER_PATH="/opt/prevhub"
BACKUP_PATH="/opt/prevhub/backups/$(date +%Y%m%d_%H%M%S)"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier la connectivit√© au serveur
check_server_connection() {
    log_info "V√©rification de la connexion au serveur..."
    if ssh -o ConnectTimeout=10 root@$SERVER "echo 'Connexion OK'" > /dev/null 2>&1; then
        log_success "Connexion au serveur √©tablie"
    else
        log_error "Impossible de se connecter au serveur $SERVER"
        log_error "V√©rifiez votre cl√© SSH et la connectivit√© r√©seau"
        exit 1
    fi
}

# Cr√©er une sauvegarde
create_backup() {
    log_info "Cr√©ation d'une sauvegarde..."
    ssh root@$SERVER "
        mkdir -p $BACKUP_PATH
        cd $SERVER_PATH
        cp -r backend $BACKUP_PATH/
        cp -r frontend $BACKUP_PATH/
        docker-compose -f docker-compose.full.yml ps > $BACKUP_PATH/services_status.txt
        echo 'Sauvegarde cr√©√©e dans $BACKUP_PATH'
    "
    log_success "Sauvegarde cr√©√©e dans $BACKUP_PATH"
}

# Mettre √† jour la base de donn√©es
update_database() {
    log_info "Mise √† jour de la structure de la base de donn√©es..."
    
    # Copier le script SQL
    scp init-projects.sql root@$SERVER:/tmp/
    
    # Ex√©cuter le script SQL
    ssh root@$SERVER "
        cd $SERVER_PATH
        docker exec -i prevhub_postgres psql -U prevhub_user -d prevhub < /tmp/init-projects.sql
        rm /tmp/init-projects.sql
    "
    log_success "Base de donn√©es mise √† jour avec succ√®s"
}

# D√©ployer le backend enrichi
deploy_backend() {
    log_info "D√©ploiement du backend enrichi..."
    
    # Copier les fichiers backend
    scp app.js package.json Dockerfile root@$SERVER:$SERVER_PATH/backend/
    
    # Reconstruire et red√©marrer le backend
    ssh root@$SERVER "
        cd $SERVER_PATH
        docker-compose -f docker-compose.full.yml build backend
        docker-compose -f docker-compose.full.yml up -d backend
        
        # Attendre que le service soit pr√™t
        echo 'Attente du d√©marrage du backend...'
        sleep 10
        
        # V√©rifier le health check
        for i in {1..30}; do
            if curl -s http://localhost:3000/api/health > /dev/null; then
                echo 'Backend d√©marr√© avec succ√®s'
                break
            fi
            echo 'Attente du backend... (\$i/30)'
            sleep 2
        done
    "
    log_success "Backend d√©ploy√© et op√©rationnel"
}

# Tester les API
test_apis() {
    log_info "Test des API enrichies..."
    
    ssh root@$SERVER "
        echo 'Test du health check:'
        curl -s http://localhost:3000/api/health | jq '.' || echo 'jq non disponible'
        
        echo -e '\nTest de l'\''API projets:'
        curl -s http://localhost:3000/api/projects | head -c 200
        echo '...'
        
        echo -e '\nTest de l'\''API entreprises:'
        curl -s 'http://localhost:3000/api/companies?limit=5' | head -c 200
        echo '...'
        
        echo -e '\nTest des statistiques:'
        curl -s http://localhost:3000/api/dashboard/stats | head -c 200
        echo '...'
    "
    log_success "Tests API termin√©s"
}

# D√©ployer l'interface React (optionnel)
deploy_frontend() {
    log_info "Pr√©paration du composant React ProjectsManager..."
    
    # Copier le composant React
    scp ProjectsManager.jsx root@$SERVER:/tmp/
    
    ssh root@$SERVER "
        # Cr√©er le r√©pertoire components s'il n'existe pas
        mkdir -p $SERVER_PATH/frontend/src/components
        
        # Copier le composant
        cp /tmp/ProjectsManager.jsx $SERVER_PATH/frontend/src/components/
        rm /tmp/ProjectsManager.jsx
        
        echo 'Composant ProjectsManager copi√© dans le frontend'
        echo 'Note: Int√©gration manuelle requise dans App.jsx'
    "
    log_success "Composant React pr√©par√©"
}

# V√©rifier le d√©ploiement
verify_deployment() {
    log_info "V√©rification du d√©ploiement..."
    
    ssh root@$SERVER "
        cd $SERVER_PATH
        echo 'Statut des services:'
        docker-compose -f docker-compose.full.yml ps
        
        echo -e '\nV√©rification des logs backend (derni√®res 10 lignes):'
        docker logs --tail 10 prevhub_backend
        
        echo -e '\nTest de connectivit√©:'
        curl -s -o /dev/null -w 'Backend API: %{http_code}\n' http://localhost:3000/api/health
        curl -s -o /dev/null -w 'Frontend: %{http_code}\n' http://localhost:80
    "
    log_success "V√©rification termin√©e"
}

# Afficher les informations post-d√©ploiement
show_deployment_info() {
    echo ""
    echo "üéâ D√©ploiement termin√© avec succ√®s !"
    echo "=================================="
    echo ""
    echo "üìä API Projets enrichies disponibles :"
    echo "  ‚Ä¢ Health check: https://$SERVER/api/health"
    echo "  ‚Ä¢ Projets: https://$SERVER/api/projects"
    echo "  ‚Ä¢ Entreprises: https://$SERVER/api/companies"
    echo "  ‚Ä¢ Statistiques: https://$SERVER/api/dashboard/stats"
    echo ""
    echo "üîê Comptes de test :"
    echo "  ‚Ä¢ Admin: admin@preveris.fr / password123"
    echo "  ‚Ä¢ User: test@preveris.fr / password123"
    echo ""
    echo "üìã Fonctionnalit√©s ajout√©es :"
    echo "  ‚úÖ Filtrage avanc√© des projets"
    echo "  ‚úÖ Pagination intelligente"
    echo "  ‚úÖ Recherche en temps r√©el"
    echo "  ‚úÖ Relations avec clients/√©tablissements"
    echo "  ‚úÖ Authentification JWT"
    echo "  ‚úÖ Validation des donn√©es"
    echo ""
    echo "üîß Prochaines √©tapes :"
    echo "  1. Int√©grer ProjectsManager.jsx dans App.jsx"
    echo "  2. Tester l'interface utilisateur"
    echo "  3. Passer √† la Phase 1.3"
    echo ""
    echo "üìÅ Sauvegarde cr√©√©e dans: $BACKUP_PATH"
    echo ""
}

# Menu principal
show_menu() {
    echo ""
    echo "Choisissez une option de d√©ploiement :"
    echo "1) D√©ploiement complet (recommand√©)"
    echo "2) Base de donn√©es seulement"
    echo "3) Backend seulement"
    echo "4) Tests API seulement"
    echo "5) V√©rification du d√©ploiement"
    echo "6) Quitter"
    echo ""
    read -p "Votre choix (1-6): " choice
}

# Fonction principale
main() {
    echo "üîç V√©rifications pr√©liminaires..."
    check_server_connection
    
    if [ "$1" = "--auto" ]; then
        # Mode automatique
        log_info "Mode automatique activ√©"
        create_backup
        update_database
        deploy_backend
        test_apis
        deploy_frontend
        verify_deployment
        show_deployment_info
    else
        # Mode interactif
        while true; do
            show_menu
            case $choice in
                1)
                    create_backup
                    update_database
                    deploy_backend
                    test_apis
                    deploy_frontend
                    verify_deployment
                    show_deployment_info
                    break
                    ;;
                2)
                    update_database
                    ;;
                3)
                    deploy_backend
                    test_apis
                    ;;
                4)
                    test_apis
                    ;;
                5)
                    verify_deployment
                    ;;
                6)
                    log_info "D√©ploiement annul√©"
                    exit 0
                    ;;
                *)
                    log_error "Option invalide. Veuillez choisir entre 1 et 6."
                    ;;
            esac
        done
    fi
}

# Gestion des arguments
case "$1" in
    --help|-h)
        echo "Usage: $0 [--auto|--help]"
        echo ""
        echo "Options:"
        echo "  --auto    D√©ploiement automatique complet"
        echo "  --help    Afficher cette aide"
        echo ""
        echo "Sans option: Mode interactif"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac

