#!/bin/bash

# Script de d√©ploiement Phase 1.3 - Interface de gestion des projets int√©gr√©e
# Int√®gre le composant ProjectsManager dans l'application ERP PrevHub

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©ploiement ERP PrevHub Phase 1.3 - Interface Int√©gr√©e"
echo "=========================================================="

# Configuration
SERVER="217.65.146.10"
SERVER_PATH="/opt/prevhub"
BACKUP_PATH="/opt/prevhub/backups/phase-1-3-$(date +%Y%m%d_%H%M%S)"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier la connectivit√© au serveur
check_server_connection() {
    log_info "V√©rification de la connexion au serveur..."
    if ssh -o ConnectTimeout=10 root@$SERVER "echo 'Connexion OK'" > /dev/null 2>&1; then
        log_success "Connexion au serveur √©tablie"
    else
        log_error "Impossible de se connecter au serveur $SERVER"
        log_error "V√©rifiez votre cl√© SSH et la connectivit√© r√©seau"
        exit 1
    fi
}

# Cr√©er une sauvegarde
create_backup() {
    log_info "Cr√©ation d'une sauvegarde avant d√©ploiement Phase 1.3..."
    ssh root@$SERVER "
        mkdir -p $BACKUP_PATH
        cd $SERVER_PATH
        cp -r frontend $BACKUP_PATH/
        cp -r backend $BACKUP_PATH/ 2>/dev/null || true
        docker-compose -f docker-compose.full.yml ps > $BACKUP_PATH/services_status.txt
        echo 'Sauvegarde Phase 1.3 cr√©√©e dans $BACKUP_PATH'
    "
    log_success "Sauvegarde cr√©√©e dans $BACKUP_PATH"
}

# D√©ployer les am√©liorations Phase 1.2 (pr√©requis)
deploy_phase_1_2() {
    log_info "V√©rification et d√©ploiement des pr√©requis Phase 1.2..."
    
    # V√©rifier si les fichiers Phase 1.2 existent
    if [ ! -f "../prevhub-enhanced/app.js" ]; then
        log_error "Fichiers Phase 1.2 non trouv√©s. Veuillez d'abord d√©ployer la Phase 1.2"
        exit 1
    fi
    
    # Copier les fichiers backend Phase 1.2
    scp ../prevhub-enhanced/app.js root@$SERVER:$SERVER_PATH/backend/
    scp ../prevhub-enhanced/package.json root@$SERVER:$SERVER_PATH/backend/
    scp ../prevhub-enhanced/Dockerfile root@$SERVER:$SERVER_PATH/backend/
    
    # Mettre √† jour la base de donn√©es
    scp ../prevhub-enhanced/init-projects.sql root@$SERVER:/tmp/
    
    ssh root@$SERVER "
        cd $SERVER_PATH
        
        # Mise √† jour de la base de donn√©es
        docker exec -i prevhub_postgres psql -U prevhub_user -d prevhub < /tmp/init-projects.sql
        rm /tmp/init-projects.sql
        
        # Reconstruction du backend
        docker-compose -f docker-compose.full.yml build backend
        docker-compose -f docker-compose.full.yml up -d backend
        
        # Attendre que le backend soit pr√™t
        echo 'Attente du d√©marrage du backend...'
        sleep 15
        
        # V√©rifier le health check
        for i in {1..30}; do
            if curl -s http://localhost:3000/api/health > /dev/null; then
                echo 'Backend Phase 1.2 op√©rationnel'
                break
            fi
            echo 'Attente du backend... (\$i/30)'
            sleep 2
        done
    "
    log_success "Phase 1.2 d√©ploy√©e avec succ√®s"
}

# D√©ployer l'interface int√©gr√©e Phase 1.3
deploy_integrated_interface() {
    log_info "D√©ploiement de l'interface int√©gr√©e Phase 1.3..."
    
    # Copier les nouveaux fichiers React
    scp App_final.jsx root@$SERVER:$SERVER_PATH/frontend/src/App.jsx
    scp ProjectsManager.jsx root@$SERVER:$SERVER_PATH/frontend/src/components/
    
    # Cr√©er un fichier index.js mis √† jour si n√©cessaire
    ssh root@$SERVER "
        cd $SERVER_PATH/frontend/src
        
        # Cr√©er le r√©pertoire components s'il n'existe pas
        mkdir -p components
        
        # V√©rifier que le fichier index.js existe et est correct
        if [ ! -f index.js ]; then
            cat > index.js << 'EOF'
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
EOF
        fi
        
        echo 'Fichiers React Phase 1.3 copi√©s'
    "
    
    # Reconstruire le frontend
    ssh root@$SERVER "
        cd $SERVER_PATH
        
        # Reconstruction du frontend avec la nouvelle interface
        docker-compose -f docker-compose.full.yml build frontend
        docker-compose -f docker-compose.full.yml up -d frontend
        
        # Attendre que le frontend soit pr√™t
        echo 'Attente du d√©marrage du frontend...'
        sleep 10
        
        # V√©rifier que le frontend r√©pond
        for i in {1..20}; do
            if curl -s http://localhost:80 > /dev/null; then
                echo 'Frontend Phase 1.3 op√©rationnel'
                break
            fi
            echo 'Attente du frontend... (\$i/20)'
            sleep 3
        done
    "
    log_success "Interface int√©gr√©e Phase 1.3 d√©ploy√©e"
}

# Tester l'int√©gration compl√®te
test_integration() {
    log_info "Tests d'int√©gration Phase 1.3..."
    
    ssh root@$SERVER "
        echo 'Test de l'\''API backend:'
        curl -s http://localhost:3000/api/health | head -c 100
        echo '...'
        
        echo -e '\nTest de l'\''interface frontend:'
        curl -s -o /dev/null -w 'Frontend: %{http_code}\n' http://localhost:80
        
        echo -e '\nTest de l'\''API projets:'
        curl -s http://localhost:3000/api/projects | head -c 100
        echo '...'
        
        echo -e '\nTest des statistiques:'
        curl -s http://localhost:3000/api/dashboard/stats | head -c 100
        echo '...'
        
        echo -e '\nTest HTTPS externe:'
        curl -s -o /dev/null -w 'HTTPS: %{http_code}\n' https://217.65.146.10
    "
    log_success "Tests d'int√©gration termin√©s"
}

# V√©rifier le d√©ploiement complet
verify_deployment() {
    log_info "V√©rification du d√©ploiement Phase 1.3..."
    
    ssh root@$SERVER "
        cd $SERVER_PATH
        echo 'Statut des services:'
        docker-compose -f docker-compose.full.yml ps
        
        echo -e '\nV√©rification des logs frontend (derni√®res 5 lignes):'
        docker logs --tail 5 prevhub_frontend
        
        echo -e '\nV√©rification des logs backend (derni√®res 5 lignes):'
        docker logs --tail 5 prevhub_backend
        
        echo -e '\nTest de connectivit√© compl√®te:'
        curl -s -o /dev/null -w 'Backend API: %{http_code}\n' http://localhost:3000/api/health
        curl -s -o /dev/null -w 'Frontend: %{http_code}\n' http://localhost:80
        curl -s -o /dev/null -w 'HTTPS: %{http_code}\n' https://217.65.146.10
    "
    log_success "V√©rification termin√©e"
}

# Afficher les informations post-d√©ploiement
show_deployment_info() {
    echo ""
    echo "üéâ D√©ploiement Phase 1.3 termin√© avec succ√®s !"
    echo "=============================================="
    echo ""
    echo "üåê Application ERP PrevHub accessible :"
    echo "  ‚Ä¢ URL principale: https://$SERVER"
    echo "  ‚Ä¢ Interface moderne avec navigation int√©gr√©e"
    echo "  ‚Ä¢ Module Projets enti√®rement fonctionnel"
    echo ""
    echo "üìã Fonctionnalit√©s Phase 1.3 :"
    echo "  ‚úÖ Interface utilisateur moderne et responsive"
    echo "  ‚úÖ Navigation intuitive entre les modules"
    echo "  ‚úÖ Gestion des projets compl√®te et int√©gr√©e"
    echo "  ‚úÖ Authentification JWT s√©curis√©e"
    echo "  ‚úÖ Tableau de bord avec statistiques en temps r√©el"
    echo "  ‚úÖ Design coh√©rent avec animations fluides"
    echo ""
    echo "üîê Comptes de test :"
    echo "  ‚Ä¢ Admin: admin@preveris.fr / password123"
    echo "  ‚Ä¢ User: test@preveris.fr / password123"
    echo ""
    echo "üìä Modules disponibles :"
    echo "  ‚úÖ Tableau de bord - Op√©rationnel"
    echo "  ‚úÖ Projets - Enti√®rement fonctionnel"
    echo "  üöß Clients - Phase 1.4 (en d√©veloppement)"
    echo "  üìÖ Documents - Phase 2 (planifi√©)"
    echo "  üìÖ T√¢ches - Phase 2 (planifi√©)"
    echo "  üìÖ Rapports - Phase 2 (planifi√©)"
    echo ""
    echo "üîß Prochaines √©tapes :"
    echo "  1. Tester l'interface utilisateur compl√®te"
    echo "  2. Valider les fonctionnalit√©s de gestion des projets"
    echo "  3. Pr√©parer la Phase 1.4 - Gestion des clients"
    echo ""
    echo "üìÅ Sauvegarde cr√©√©e dans: $BACKUP_PATH"
    echo ""
    echo "üéØ L'ERP PrevHub Phase 1.3 est maintenant op√©rationnel !"
    echo ""
}

# Menu principal
show_menu() {
    echo ""
    echo "Choisissez une option de d√©ploiement Phase 1.3 :"
    echo "1) D√©ploiement complet Phase 1.3 (recommand√©)"
    echo "2) Phase 1.2 seulement (pr√©requis)"
    echo "3) Interface Phase 1.3 seulement"
    echo "4) Tests d'int√©gration seulement"
    echo "5) V√©rification du d√©ploiement"
    echo "6) Quitter"
    echo ""
    read -p "Votre choix (1-6): " choice
}

# Fonction principale
main() {
    echo "üîç V√©rifications pr√©liminaires Phase 1.3..."
    check_server_connection
    
    if [ "$1" = "--auto" ]; then
        # Mode automatique
        log_info "Mode automatique Phase 1.3 activ√©"
        create_backup
        deploy_phase_1_2
        deploy_integrated_interface
        test_integration
        verify_deployment
        show_deployment_info
    else
        # Mode interactif
        while true; do
            show_menu
            case $choice in
                1)
                    create_backup
                    deploy_phase_1_2
                    deploy_integrated_interface
                    test_integration
                    verify_deployment
                    show_deployment_info
                    break
                    ;;
                2)
                    deploy_phase_1_2
                    ;;
                3)
                    deploy_integrated_interface
                    ;;
                4)
                    test_integration
                    ;;
                5)
                    verify_deployment
                    ;;
                6)
                    log_info "D√©ploiement annul√©"
                    exit 0
                    ;;
                *)
                    log_error "Option invalide. Veuillez choisir entre 1 et 6."
                    ;;
            esac
        done
    fi
}

# Gestion des arguments
case "$1" in
    --help|-h)
        echo "Usage: $0 [--auto|--help]"
        echo ""
        echo "Options:"
        echo "  --auto    D√©ploiement automatique complet Phase 1.3"
        echo "  --help    Afficher cette aide"
        echo ""
        echo "Sans option: Mode interactif"
        echo ""
        echo "Pr√©requis:"
        echo "  - Fichiers Phase 1.2 dans ../prevhub-enhanced/"
        echo "  - Acc√®s SSH au serveur $SERVER"
        echo "  - Docker et Docker Compose sur le serveur"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac

