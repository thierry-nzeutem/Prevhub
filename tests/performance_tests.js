// Tests de performance ERP PrevHub - Phase 1.4
// Validation des performances et de la qualit√© du code

const fs = require('fs');
const path = require('path');

// Configuration
const PHASE_1_4_DIR = '/tmp/prevhub-phase-1-4';
const RESULTS_FILE = '/tmp/prevhub-phase-1-5-tests/performance_results.json';

// M√©triques de performance
let performanceMetrics = {
    timestamp: new Date().toISOString(),
    phase: '1.4',
    tests: []
};

// Fonction utilitaire pour ajouter un test
function addTest(name, value, unit, status, details = '') {
    performanceMetrics.tests.push({
        name,
        value,
        unit,
        status,
        details
    });
    
    const statusIcon = status === 'PASS' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${statusIcon} ${name}: ${value}${unit} - ${status}`);
    if (details) console.log(`   ${details}`);
}

// Test 1: Analyse de la taille des fichiers
function testFileSizes() {
    console.log('\nüìä Test 1: Analyse de la taille des fichiers');
    
    const files = [
        'ClientsManager.jsx',
        'clients-api.js',
        'init-clients-db.sql',
        'App_with_clients.jsx',
        'deploy-phase-1-4.sh',
        'README_PHASE_1_4.md',
        'PHASE_1_4_SUMMARY.md'
    ];
    
    let totalSize = 0;
    
    files.forEach(file => {
        const filePath = path.join(PHASE_1_4_DIR, file);
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            const sizeKB = Math.round(stats.size / 1024);
            totalSize += sizeKB;
            
            // Crit√®res de validation
            let status = 'PASS';
            let details = '';
            
            if (file === 'ClientsManager.jsx' && sizeKB < 30) {
                status = 'FAIL';
                details = 'Composant trop petit, fonctionnalit√©s manquantes';
            } else if (file === 'clients-api.js' && sizeKB < 20) {
                status = 'FAIL';
                details = 'API incompl√®te';
            } else if (sizeKB > 100) {
                status = 'WARNING';
                details = 'Fichier volumineux, optimisation recommand√©e';
            }
            
            addTest(`Taille ${file}`, sizeKB, 'KB', status, details);
        } else {
            addTest(`Taille ${file}`, 0, 'KB', 'FAIL', 'Fichier manquant');
        }
    });
    
    addTest('Taille totale Phase 1.4', totalSize, 'KB', 
        totalSize > 100 ? 'PASS' : 'FAIL', 
        totalSize > 100 ? 'Taille appropri√©e pour une phase compl√®te' : 'Phase incompl√®te');
}

// Test 2: Analyse de la complexit√© du code
function testCodeComplexity() {
    console.log('\nüîç Test 2: Analyse de la complexit√© du code');
    
    // Analyse ClientsManager.jsx
    const clientsManagerPath = path.join(PHASE_1_4_DIR, 'ClientsManager.jsx');
    if (fs.existsSync(clientsManagerPath)) {
        const content = fs.readFileSync(clientsManagerPath, 'utf8');
        
        // Compter les fonctions
        const functionCount = (content.match(/const\s+\w+\s*=\s*\(/g) || []).length +
                             (content.match(/function\s+\w+\s*\(/g) || []).length;
        
        // Compter les hooks React
        const hooksCount = (content.match(/use\w+\(/g) || []).length;
        
        // Compter les √©tats
        const stateCount = (content.match(/useState\(/g) || []).length;
        
        // Compter les effets
        const effectCount = (content.match(/useEffect\(/g) || []).length;
        
        // Compter les lignes de code (approximatif)
        const linesOfCode = content.split('\n').filter(line => 
            line.trim() && !line.trim().startsWith('//') && !line.trim().startsWith('/*')
        ).length;
        
        addTest('Fonctions ClientsManager', functionCount, '', 
            functionCount >= 10 ? 'PASS' : 'WARNING',
            functionCount >= 10 ? 'Complexit√© appropri√©e' : 'Fonctionnalit√©s limit√©es');
            
        addTest('Hooks React', hooksCount, '', 
            hooksCount >= 3 ? 'PASS' : 'FAIL',
            'useState, useEffect requis minimum');
            
        addTest('√âtats g√©r√©s', stateCount, '', 
            stateCount >= 5 ? 'PASS' : 'WARNING',
            'Gestion d\'√©tat complexe requise');
            
        addTest('Effets de bord', effectCount, '', 
            effectCount >= 1 ? 'PASS' : 'FAIL',
            'useEffect requis pour chargement donn√©es');
            
        addTest('Lignes de code ClientsManager', linesOfCode, '', 
            linesOfCode >= 500 ? 'PASS' : 'WARNING',
            linesOfCode >= 500 ? 'Composant complet' : 'Composant simple');
    }
    
    // Analyse clients-api.js
    const apiPath = path.join(PHASE_1_4_DIR, 'clients-api.js');
    if (fs.existsSync(apiPath)) {
        const content = fs.readFileSync(apiPath, 'utf8');
        
        // Compter les endpoints
        const endpointCount = (content.match(/app\.(get|post|put|delete)\(/g) || []).length;
        
        // Compter les middlewares
        const middlewareCount = (content.match(/authenticateToken/g) || []).length;
        
        // V√©rifier la s√©curit√©
        const hasJWT = content.includes('jwt.verify');
        const hasCORS = content.includes('cors');
        const hasValidation = content.includes('required');
        
        addTest('Endpoints API', endpointCount, '', 
            endpointCount >= 8 ? 'PASS' : 'WARNING',
            'CRUD complet pour 2 entit√©s + stats');
            
        addTest('Middlewares s√©curit√©', middlewareCount, '', 
            middlewareCount >= 4 ? 'PASS' : 'WARNING',
            'Protection des routes sensibles');
            
        addTest('Authentification JWT', hasJWT ? 1 : 0, '', 
            hasJWT ? 'PASS' : 'FAIL',
            'S√©curit√© requise');
            
        addTest('Configuration CORS', hasCORS ? 1 : 0, '', 
            hasCORS ? 'PASS' : 'FAIL',
            'Cross-origin requis');
            
        addTest('Validation donn√©es', hasValidation ? 1 : 0, '', 
            hasValidation ? 'PASS' : 'WARNING',
            'Validation c√¥t√© serveur recommand√©e');
    }
}

// Test 3: Analyse de la base de donn√©es
function testDatabaseStructure() {
    console.log('\nüóÑÔ∏è Test 3: Analyse de la structure de base de donn√©es');
    
    const sqlPath = path.join(PHASE_1_4_DIR, 'init-clients-db.sql');
    if (fs.existsSync(sqlPath)) {
        const content = fs.readFileSync(sqlPath, 'utf8');
        
        // Compter les tables
        const tableCount = (content.match(/CREATE TABLE/gi) || []).length;
        
        // Compter les index
        const indexCount = (content.match(/CREATE INDEX/gi) || []).length;
        
        // Compter les contraintes
        const constraintCount = (content.match(/CONSTRAINT/gi) || []).length;
        
        // Compter les fonctions
        const functionCount = (content.match(/CREATE.*FUNCTION/gi) || []).length;
        
        // Compter les vues
        const viewCount = (content.match(/CREATE.*VIEW/gi) || []).length;
        
        // Compter les triggers
        const triggerCount = (content.match(/CREATE TRIGGER/gi) || []).length;
        
        // V√©rifier les donn√©es de d√©monstration
        const hasData = content.includes('INSERT INTO');
        
        addTest('Tables cr√©√©es', tableCount, '', 
            tableCount >= 2 ? 'PASS' : 'FAIL',
            'companies et etablissements requis');
            
        addTest('Index de performance', indexCount, '', 
            indexCount >= 5 ? 'PASS' : 'WARNING',
            'Optimisation des requ√™tes');
            
        addTest('Contraintes d√©finies', constraintCount, '', 
            constraintCount >= 3 ? 'PASS' : 'WARNING',
            'Int√©grit√© des donn√©es');
            
        addTest('Fonctions SQL', functionCount, '', 
            functionCount >= 2 ? 'PASS' : 'WARNING',
            'Fonctions utilitaires');
            
        addTest('Vues cr√©√©es', viewCount, '', 
            viewCount >= 1 ? 'PASS' : 'WARNING',
            'Vues pour statistiques');
            
        addTest('Triggers automatiques', triggerCount, '', 
            triggerCount >= 1 ? 'PASS' : 'WARNING',
            'Mise √† jour automatique');
            
        addTest('Donn√©es de d√©monstration', hasData ? 1 : 0, '', 
            hasData ? 'PASS' : 'WARNING',
            'Donn√©es de test requises');
    }
}

// Test 4: Analyse de la documentation
function testDocumentation() {
    console.log('\nüìö Test 4: Analyse de la documentation');
    
    // Analyse README
    const readmePath = path.join(PHASE_1_4_DIR, 'README_PHASE_1_4.md');
    if (fs.existsSync(readmePath)) {
        const content = fs.readFileSync(readmePath, 'utf8');
        
        const hasInstallation = content.includes('Installation');
        const hasAPI = content.includes('API');
        const hasDatabase = content.includes('base de donn√©es');
        const hasExamples = content.includes('exemple');
        const hasTroubleshooting = content.includes('D√©pannage');
        
        const wordCount = content.split(/\s+/).length;
        
        addTest('Documentation compl√®te', hasInstallation && hasAPI && hasDatabase ? 1 : 0, '', 
            hasInstallation && hasAPI && hasDatabase ? 'PASS' : 'FAIL',
            'Sections essentielles requises');
            
        addTest('Exemples fournis', hasExamples ? 1 : 0, '', 
            hasExamples ? 'PASS' : 'WARNING',
            'Exemples facilitent l\'utilisation');
            
        addTest('Guide de d√©pannage', hasTroubleshooting ? 1 : 0, '', 
            hasTroubleshooting ? 'PASS' : 'WARNING',
            'Support utilisateur');
            
        addTest('Mots dans README', wordCount, '', 
            wordCount >= 2000 ? 'PASS' : 'WARNING',
            wordCount >= 2000 ? 'Documentation d√©taill√©e' : 'Documentation succincte');
    }
    
    // Analyse r√©sum√©
    const summaryPath = path.join(PHASE_1_4_DIR, 'PHASE_1_4_SUMMARY.md');
    if (fs.existsSync(summaryPath)) {
        const content = fs.readFileSync(summaryPath, 'utf8');
        
        const hasMetrics = content.includes('KB') || content.includes('m√©triques');
        const hasAchievements = content.includes('R√©alisations') || content.includes('accomplies');
        const hasConclusion = content.includes('Conclusion') || content.includes('succ√®s');
        
        addTest('M√©triques dans r√©sum√©', hasMetrics ? 1 : 0, '', 
            hasMetrics ? 'PASS' : 'WARNING',
            'M√©triques quantifient les r√©alisations');
            
        addTest('R√©alisations list√©es', hasAchievements ? 1 : 0, '', 
            hasAchievements ? 'PASS' : 'FAIL',
            'R√©sum√© des accomplissements requis');
            
        addTest('Conclusion pr√©sente', hasConclusion ? 1 : 0, '', 
            hasConclusion ? 'PASS' : 'WARNING',
            'Conclusion synth√©tise les r√©sultats');
    }
}

// Test 5: Analyse du script de d√©ploiement
function testDeploymentScript() {
    console.log('\nüöÄ Test 5: Analyse du script de d√©ploiement');
    
    const scriptPath = path.join(PHASE_1_4_DIR, 'deploy-phase-1-4.sh');
    if (fs.existsSync(scriptPath)) {
        const content = fs.readFileSync(scriptPath, 'utf8');
        
        // V√©rifier les fonctions principales
        const hasTestConnection = content.includes('test_connection');
        const hasBackup = content.includes('create_backup');
        const hasRollback = content.includes('rollback');
        const hasHelp = content.includes('show_help');
        
        // Compter les options
        const optionCount = (content.match(/--\w+/g) || []).length;
        
        // V√©rifier la gestion d'erreurs
        const hasErrorHandling = content.includes('set -e') && content.includes('log_error');
        
        // V√©rifier les couleurs
        const hasColors = content.includes('GREEN=') && content.includes('RED=');
        
        addTest('Fonctions essentielles', hasTestConnection && hasBackup && hasRollback ? 1 : 0, '', 
            hasTestConnection && hasBackup && hasRollback ? 'PASS' : 'FAIL',
            'Test, sauvegarde, rollback requis');
            
        addTest('Options disponibles', optionCount, '', 
            optionCount >= 5 ? 'PASS' : 'WARNING',
            'Flexibilit√© de d√©ploiement');
            
        addTest('Aide int√©gr√©e', hasHelp ? 1 : 0, '', 
            hasHelp ? 'PASS' : 'WARNING',
            'Documentation utilisateur');
            
        addTest('Gestion d\'erreurs', hasErrorHandling ? 1 : 0, '', 
            hasErrorHandling ? 'PASS' : 'FAIL',
            'Robustesse du script');
            
        addTest('Interface color√©e', hasColors ? 1 : 0, '', 
            hasColors ? 'PASS' : 'WARNING',
            'Exp√©rience utilisateur am√©lior√©e');
    }
}

// Test 6: Calcul des m√©triques globales
function calculateGlobalMetrics() {
    console.log('\nüìà Test 6: M√©triques globales de la Phase 1.4');
    
    // Calculer les statistiques des tests
    const totalTests = performanceMetrics.tests.length;
    const passedTests = performanceMetrics.tests.filter(t => t.status === 'PASS').length;
    const warningTests = performanceMetrics.tests.filter(t => t.status === 'WARNING').length;
    const failedTests = performanceMetrics.tests.filter(t => t.status === 'FAIL').length;
    
    const successRate = Math.round((passedTests / totalTests) * 100);
    const qualityScore = Math.round(((passedTests * 1.0 + warningTests * 0.5) / totalTests) * 100);
    
    // Calculer la taille totale
    const files = fs.readdirSync(PHASE_1_4_DIR);
    let totalSize = 0;
    files.forEach(file => {
        const filePath = path.join(PHASE_1_4_DIR, file);
        const stats = fs.statSync(filePath);
        totalSize += stats.size;
    });
    const totalSizeKB = Math.round(totalSize / 1024);
    
    addTest('Tests r√©ussis', passedTests, `/${totalTests}`, 
        successRate >= 80 ? 'PASS' : successRate >= 60 ? 'WARNING' : 'FAIL',
        `Taux de r√©ussite: ${successRate}%`);
        
    addTest('Score de qualit√©', qualityScore, '%', 
        qualityScore >= 85 ? 'PASS' : qualityScore >= 70 ? 'WARNING' : 'FAIL',
        'Qualit√© globale du code');
        
    addTest('Taille totale archive', totalSizeKB, 'KB', 
        totalSizeKB >= 100 && totalSizeKB <= 200 ? 'PASS' : 'WARNING',
        'Taille appropri√©e pour une phase compl√®te');
    
    // M√©triques finales
    performanceMetrics.summary = {
        totalTests,
        passedTests,
        warningTests,
        failedTests,
        successRate,
        qualityScore,
        totalSizeKB,
        status: qualityScore >= 85 ? 'EXCELLENT' : qualityScore >= 70 ? 'GOOD' : qualityScore >= 50 ? 'ACCEPTABLE' : 'POOR'
    };
}

// G√©n√©ration du rapport final
function generateReport() {
    console.log('\nüìã G√©n√©ration du rapport de performance');
    
    // Sauvegarder les r√©sultats JSON
    fs.writeFileSync(RESULTS_FILE, JSON.stringify(performanceMetrics, null, 2));
    
    // G√©n√©rer le rapport Markdown
    const reportPath = '/tmp/prevhub-phase-1-5-tests/performance_report.md';
    const summary = performanceMetrics.summary;
    
    const reportContent = `# üìä Rapport de Performance - Phase 1.4

## R√©sum√© ex√©cutif

- **Tests ex√©cut√©s** : ${summary.totalTests}
- **Tests r√©ussis** : ${summary.passedTests}
- **Avertissements** : ${summary.warningTests}
- **Tests √©chou√©s** : ${summary.failedTests}
- **Taux de r√©ussite** : ${summary.successRate}%
- **Score de qualit√©** : ${summary.qualityScore}%
- **Statut global** : **${summary.status}**

## M√©triques d√©taill√©es

${performanceMetrics.tests.map(test => 
    `- ${test.status === 'PASS' ? '‚úÖ' : test.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå'} **${test.name}** : ${test.value}${test.unit}${test.details ? ` - ${test.details}` : ''}`
).join('\n')}

## Conclusion

${summary.qualityScore >= 85 ? 
    'üéâ **EXCELLENTE QUALIT√â** - La Phase 1.4 d√©passe les standards de qualit√© attendus.' :
    summary.qualityScore >= 70 ?
    '‚úÖ **BONNE QUALIT√â** - La Phase 1.4 respecte les standards de qualit√©.' :
    summary.qualityScore >= 50 ?
    '‚ö†Ô∏è **QUALIT√â ACCEPTABLE** - La Phase 1.4 n√©cessite quelques am√©liorations.' :
    '‚ùå **QUALIT√â INSUFFISANTE** - La Phase 1.4 n√©cessite des corrections importantes.'
}

**Taille totale** : ${summary.totalSizeKB}KB  
**Date d'analyse** : ${new Date().toLocaleString()}  
**Recommandation** : ${summary.qualityScore >= 70 ? 'Approuv√© pour production' : 'Am√©liorations requises'}
`;

    fs.writeFileSync(reportPath, reportContent);
    
    console.log(`\n‚úÖ Rapport g√©n√©r√© : ${reportPath}`);
    console.log(`üìä R√©sultats JSON : ${RESULTS_FILE}`);
    
    // Affichage du r√©sum√© final
    console.log('\n' + '='.repeat(50));
    console.log('    RAPPORT DE PERFORMANCE PHASE 1.4');
    console.log('='.repeat(50));
    console.log(`Score de qualit√© : ${summary.qualityScore}% (${summary.status})`);
    console.log(`Taux de r√©ussite : ${summary.successRate}%`);
    console.log(`Taille totale    : ${summary.totalSizeKB}KB`);
    console.log('='.repeat(50));
}

// Ex√©cution des tests
function runAllTests() {
    console.log('üß™ Tests de Performance ERP PrevHub - Phase 1.4');
    console.log('================================================');
    
    testFileSizes();
    testCodeComplexity();
    testDatabaseStructure();
    testDocumentation();
    testDeploymentScript();
    calculateGlobalMetrics();
    generateReport();
}

// Lancement des tests
runAllTests();

