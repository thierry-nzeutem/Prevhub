version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  prevhub-db:
    image: postgres:15-alpine
    container_name: prevhub-db
    environment:
      POSTGRES_DB: prevhub
      POSTGRES_USER: prevhub_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-prevhub_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prevhub_user -d prevhub"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  prevhub-cache:
    image: redis:7-alpine
    container_name: prevhub-cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend Node.js
  prevhub-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: prevhub-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: prevhub-db
      DB_PORT: 5432
      DB_NAME: prevhub
      DB_USER: prevhub_user
      DB_PASSWORD: ${DB_PASSWORD:-prevhub_secure_password}
      REDIS_HOST: prevhub-cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      OLLAMA_HOST: prevhub-ollama
      OLLAMA_PORT: 11434
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "3000:3000"
    networks:
      - frontend-network
      - backend-network
      - ai-network
    depends_on:
      - prevhub-db
      - prevhub-cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  prevhub-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: prevhub-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_VERSION: ${APP_VERSION:-1.0.0}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    networks:
      - frontend-network
    depends_on:
      - prevhub-api
    restart: unless-stopped

  # Service IA OLLAMA
  prevhub-ollama:
    image: ollama/ollama:latest
    container_name: prevhub-ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
    volumes:
      - ollama_data:/root/.ollama
      - ./docker/ollama/models:/models
    ports:
      - "11434:11434"
    networks:
      - ai-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          memory: 40G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Reverse Proxy Nginx
  prevhub-proxy:
    image: nginx:alpine
    container_name: prevhub-proxy
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
      - uploads_data:/var/www/uploads
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend-network
    depends_on:
      - prevhub-api
      - prevhub-frontend
    restart: unless-stopped

  # Monitoring Prometheus
  prevhub-prometheus:
    image: prom/prometheus:latest
    container_name: prevhub-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      - backend-network
    restart: unless-stopped

  # Monitoring Grafana
  prevhub-grafana:
    image: grafana/grafana:latest
    container_name: prevhub-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_secure_password}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    networks:
      - monitoring-network
    depends_on:
      - prevhub-prometheus
    restart: unless-stopped

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  ai-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

